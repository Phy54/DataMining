import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.preprocessing import StandardScaler

# Xem t·ªïng quan b·ªô d·ªØ li·ªáu
def overview(df):
    st.subheader("üîç Xem t·ªïng quan d·ªØ li·ªáu")
    st.write(f"B·ªô d·ªØ li·ªáu bao g·ªìm {df.shape[0]} d√≤ng v√† {df.shape[1]} c·ªôt.")
    st.dataframe(df)

# Ki·ªÉm tra d·ªØ li·ªáu Null
def nullData(df):
    st.subheader("üìà Th·ªëng k√™ d·ªØ li·ªáu")

    # Ki·ªÉm tra d·ªØ li·ªáu Null
    numNull = sum(df.isnull().sum())
    if (numNull != 0):
        st.write(f"C√≥ {numNull} d√≤ng d·ªØ li·ªáu r·ªóng")
        st.write(df[df.isnull().any(axis=1)])
    else:
        st.write("Kh√¥ng c√≥ gi√° tr·ªã Null.")

# Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
def duplicatedData(df):

    numDup = df.duplicated().sum()
    if (numDup > 0):
        st.write(f"C√≥ {numDup} d√≤ng d·ªØ li·ªáu b·ªã tr√πng l·∫∑p.")
        st.dataframe(df[df.duplicated()])
    else:
        st.write("Kh√¥ng c√≥ d√≤ng d·ªØ li·ªáu n√†o b·ªã tr√πng.")

# Ki·ªÉm tra d·ªØ li·ªáu duy nh·∫•t   
def uniqueData(df):
    st.write("S·ªë l∆∞·ª£ng gi√° tr·ªã kh√°c nhau ·ªü m·ªói c·ªôt:")
    st.dataframe(df.nunique())

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng giao d·ªãch ·ªü c√°c ƒë·ªãa ƒëi·ªÉm
def plotLocationByTransactionVolume(df):
    col1, col2, col3 = st.columns([0.5, 4, 0.5])

    all_locations = df['Location'].value_counts().head(43)

    fig, ax = plt.subplots(figsize=(10, 5))

    sns.barplot(y=all_locations.index, x=all_locations.values, palette='viridis')
    
    ax.tick_params(axis='both', labelsize=8)
    plt.title('All Locations by Transaction Volume', fontsize=20)
    plt.xlabel('Transaction Volume', fontsize=18)
    plt.ylabel('Location', fontsize=18)

    with col2:
        st.pyplot(fig)

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng giao d·ªãch theo Transaction Amount
def plotTransactionAmount(df):
    col1, col2, col3, col4 = st.columns([0.5, 2, 2, 0.5])
    
    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt th·ªÉ hi·ªán s·ªë l∆∞·ª£ng
    fig1, ax1 = plt.subplots(figsize = (10, 10))

    sns.histplot(data=df, x="TransactionAmount", color='pink', kde=True)

    plt.xlabel("Transaction Amount", fontsize=18)
    plt.ylabel("Count", fontsize=18)

    plt.title("Histplot of Transaction Amount", fontsize=20)

    with col2:
        st.pyplot(fig1)

    # V·∫Ω bi·ªÉu ƒë·ªì h·ªôp th·ªÉ hi·ªán gi√° tr·ªã
    fig2, ax2 = plt.subplots(figsize = (10, 10))

    sns.boxplot(y=df['TransactionAmount'], color='pink')

    plt.title('Box Plot of Transaction Amount', fontsize=20)
    plt.ylabel('Transaction Amount', fontsize=18)

    with col3:
        st.pyplot(fig2)

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·ªßa Transaction Type
def plotTransactionType(df):
    debitcard_counts = df[df['TransactionType']=='Debit']['TransactionType'].count()
    creditcard_counts = df[df['TransactionType']=='Credit']['TransactionType'].count()
    
    col1, col2, col3, col4 = st.columns([0.5, 2, 2, 0.5])
    
    index_values = [debitcard_counts, creditcard_counts]
    index_labels = ['Debit', 'Credit']

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt th·ªÉ hi·ªán s·ªë l∆∞·ª£ng
    fig1, ax1 = plt.subplots(figsize = (10, 10))

    plt.bar(index_labels, index_values, color=['pink', 'lightblue'])
    plt.xlabel('Transaction Type', fontsize=20)
    plt.ylabel('Count', fontsize=20)
    ax1.tick_params(axis='both', labelsize=10)

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán t·ª∑ l·ªá
    fig2, ax2 = plt.subplots(figsize = (10, 5))

    plt.pie(index_values, labels = index_labels, autopct='%2.2f%%', colors=['pink', 'lightblue'])

    with col2:
        st.pyplot(fig1)

    with col3:
        st.pyplot(fig2)

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·ªßa Channel
def plotChannel(df):
    col1, col2, col3, col4 = st.columns([0.5, 2, 2, 0.5])

    all_channels = df['Channel'].value_counts().head(3)
    channel_counts = df['Channel'].value_counts()

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt th·ªÉ hi·ªán s·ªë l∆∞·ª£ng
    fig1, ax1 = plt.subplots(figsize = (10, 10))

    sns.barplot(x=all_channels.index, y=all_channels.values, palette=['pink', 'lightblue', 'lightgreen'])
    plt.xlabel("Channel", fontsize=18)
    plt.ylabel("Count", fontsize=18)
    plt.title("Barplot of Channel", fontsize=20)
    ax1.tick_params(axis='both', labelsize=10)

    with col2:
        st.pyplot(fig1)

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán t·ª∑ l·ªá
    fig2, ax2 = plt.subplots(figsize = (10, 5))

    plt.pie(channel_counts, labels=channel_counts.index, autopct='%2.2f%%', colors=['pink', 'lightblue', 'lightgreen'])
    plt.title('Pie Chart of Channel', fontsize=20)
    plt.ylabel('Channel', fontsize=18)

    with col3:
        st.pyplot(fig2)

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa Customer Age
def plotCustomerAge(df):
    col1, col2, col3 = st.columns([0.5, 4, 0.5])

    fig , ax = plt.subplots(figsize=(10, 5))

    sns.histplot(data=df, x="CustomerAge", color='pink', kde=True)

    plt.title('Distribution of Customer Age', fontsize=20)
    plt.xlabel('Customer Age', fontsize=18)
    plt.ylabel('Count', fontsize=18)
    ax.tick_params(axis='both', labelsize=10)
    
    with col2:
        st.pyplot(fig)

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·ªßa Customer Occupation
def plotCustomerOccupation(df):
    col1, col2, col3, col4 = st.columns([0.5, 2, 2, 0.5])

    customer_occupation_counts = df['CustomerOccupation'].value_counts()

    fig1 , ax1 = plt.subplots(figsize=(10, 10))

    sns.barplot(x=customer_occupation_counts.index, y=customer_occupation_counts.values, palette=['pink', 'lightblue', 'lightgreen', 'yellow'])
    plt.title('Distribution of Customer Occupation', fontsize=20)
    plt.xlabel('Customer Ocupation', fontsize=18)
    plt.ylabel('Count', fontsize=18)
    ax1.tick_params(axis='both', labelsize=10)
    
    with col2:
        st.pyplot(fig1)

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán t·ª∑ l·ªá
    fig2, ax2 = plt.subplots(figsize = (10, 10))
    
    plt.pie(customer_occupation_counts, labels=customer_occupation_counts.index, autopct='%2.2f%%', colors=['pink', 'lightblue', 'lightgreen', 'yellow'])
    plt.title('Pie Chart of Customer Occupation', fontsize=20)
    plt.ylabel('CustomerOccupation', fontsize=18)

    with col3:
        st.pyplot(fig2)

# V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa Account Balance
def plotBalance(df):
    col1, col2, col3 = st.columns([0.5, 4, 0.5])

    fig , ax = plt.subplots(figsize=(10, 5))

    sns.kdeplot(data=df, x="AccountBalance", color='navy', shade=True)
    plt.title('Density Plot of Account Balance of the Customer', fontsize=20)
    plt.xlabel('Balance', fontsize=18)
    plt.ylabel('Density', fontsize=18)
    ax.tick_params(axis='both', labelsize=10)
    
    with col2:
        st.pyplot(fig)

# X·ª≠ l√Ω d·ªØ li·ªáu
def preprocessData(df):
    df = df[['TransactionAmount','AccountBalance', 'CustomerAge']]
    df['oldBalance'] = df['TransactionAmount'] + df['AccountBalance']
    df['TransactionRate'] = df['TransactionAmount']/df['oldBalance']

    X = df[['TransactionAmount', 'TransactionRate', 'CustomerAge']]
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(X)

    return df, scaled_data

# V·∫Ω k-distance plot ƒë·ªÉ ch·ªçn eps
def plotKDistance(df, scaled_data, k = 6):
    # T√≠nh to√°n kho·∫£ng c√°ch k-NN
    from sklearn.neighbors import NearestNeighbors
    import numpy as np

    # D√πng k g·∫ßn nh·∫•t = min_samples
    neigh = NearestNeighbors(n_neighbors=k)
    nbrs = neigh.fit(scaled_data)
    distances, indices = nbrs.kneighbors(scaled_data)

    # L·∫•y kho·∫£ng c√°ch t·ªõi ƒëi·ªÉm th·ª© k
    distances = np.sort(distances[:, k-1])
    plt.figure(figsize=(10,5))
    plt.plot(distances)
    plt.title("K-distance plot ƒë·ªÉ ch·ªçn eps")
    plt.xlabel("D·ªØ li·ªáu ƒë∆∞·ª£c s·∫Øp x·∫øp")
    plt.ylabel(f"Kho·∫£ng c√°ch t·ªõi h√†ng x√≥m th·ª© {k}")
    plt.grid(True)

    col1, col2, col3 = st.columns([0.5, 4, 0.5])
    with col2:
        st.pyplot(plt.gcf())

# T√≠nh to√°n DBSCAN
def computeDBSCAN(df, scaled_data, eps=0.5, min_samples=5):
    from sklearn.cluster import DBSCAN
    # Ch·∫°y DBSCAN
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    dbscan_labels = dbscan.fit_predict(scaled_data)
    df['DBSCAN_Cluster'] = dbscan_labels

    # T√≠nh to√°n s·ªë l∆∞·ª£ng cluster
    num_clusters = df['DBSCAN_Cluster'].nunique() - (1 if -1 in dbscan_labels else 0)
    st.write(f"S·ªë l∆∞·ª£ng cluster: {num_clusters}")
    return dbscan_labels

# Mapping c√°c nh√£n DBSCAN
def mapDBSCANLabels(df, dbscan_labels):
    # T·∫°o mapping cho c√°c nh√£n
    count = pd.Series(dbscan_labels).value_counts().to_dict()
    mapping = {}
    for i in count:
        if i != -1:
            if i == max(count, key=count.get):
                mapping[i] = "Normal"
            else:
                mapping[i] = f"Suspicious Group {i}"
        else:
            mapping[i] = "Fraund"
    df['DBSCAN_Cluster'] = dbscan_labels

    # √Åp d·ª•ng mapping cho nh√£n
    df['DBSCAN_Cluster'] = df['DBSCAN_Cluster'].map(mapping)

    return df

# V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n DBSCAN tr√™n 2 chi·ªÅu
def visualizeDBSCAN2D(df, scaled_data):
    
    # Ch·ªçn c√°c c·ªôt ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
    df_scaled = pd.DataFrame(scaled_data, columns=['TransactionAmount', 'TransactionRate', 'CustomerAge'])
    df_plot = df_scaled.copy()
    df_plot['DBSCAN_Cluster'] = df['DBSCAN_Cluster']

    # Gi·∫£m chi·ªÅu d·ªØ li·ªáu xu·ªëng 2 chi·ªÅu ƒë·ªÉ tr·ª±c quan h√≥a
    from sklearn.decomposition import PCA

    pca = PCA(n_components=2)  # ho·∫∑c 2 ƒë·ªÉ tr·ª±c quan h√≥a
    X_pca = pca.fit_transform(scaled_data)
    st.write("Gi·∫£m chi·ªÅu d·ªØ li·ªáu t·ª´", scaled_data.shape[1], "xu·ªëng", X_pca.shape[1])

    # Th√™m c√°c c·ªôt g·ªëc v√†o df_plot
    cols = df_plot.columns
    for col in df.columns:
        if col in cols:
            df_plot[f'org_{col}'] = df[col]

    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n
    fig, ax = plt.subplots(figsize=(10, 10))

    hover_cols = [col for col in df_plot.columns] # ch·ªâ ƒë·ªãnh c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã khi di chu·ªôt

    fig = px.scatter(df_plot, 
                     x=X_pca[:, 0],
                     y=X_pca[:, 1],
                     color=df_plot['DBSCAN_Cluster'],
                     hover_data=hover_cols, 
                     title="DBSCAN Clustering on Transactions",
                     height=600,
                    )
    
    col1, col2, col3 = st.columns([0.25, 5, 0.25])
    with col2:
        st.plotly_chart(fig, use_container_width=True)

# 
def plotAmountBalance(df):
    fig, ax = plt.subplots(figsize=(10, 5))

    sns.scatterplot(data=df, x='AccountBalance', y='TransactionAmount', hue='TransactionType', alpha=0.6)
    plt.title('Transaction Amount vs. Account Balance')
    plt.xlabel('Account Balance')
    plt.ylabel('Transaction Amount')
    plt.legend(title = 'TransactionType')
    ax.tick_params(axis='both', labelsize=10)

    col1, col2, col3 = st.columns([0.25, 5, 0.25])
    with col2:
        st.pyplot(fig)

# V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n DBSCAN tr√™n 3 chi·ªÅu
def visualizeDBSCAN3D(df, scaled_data):

    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n 3D
    fig = px.scatter_3d(df, scaled_data[:,1], scaled_data[:,2], scaled_data[:,0],
                        color=df['DBSCAN_Cluster'],
                        title="DBSCAN Clustering on Transactions",
                        height=600)

    col1, col2, col3 = st.columns([0.25, 5, 0.25])
    with col2:
        st.plotly_chart(fig, use_container_width=True)

# V·∫Ω heatmap t∆∞∆°ng quan
def plotCorrelation(df):
    corr = df.corr(numeric_only=True)
    fig, ax = plt.subplots()
    sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax)
    plt.title("Heatmap of Correlation", fontsize=20)
    
    col1, col2, col3 = st.columns([1, 3, 1])
    with col2:
        st.pyplot(fig)

def computeSilhouette(df, scaled_data, dbscan_labels):

    from sklearn.metrics import silhouette_score

    # T√≠nh to√°n ch·ªâ s·ªë Silhouette
    if len(set(dbscan_labels)) > 1:
        silhouette_avg = silhouette_score(scaled_data, dbscan_labels)
        st.write(f"Ch·ªâ s·ªë Silhouette: {silhouette_avg:.2f}")
    else:
        st.write("Kh√¥ng th·ªÉ t√≠nh to√°n ch·ªâ s·ªë Silhouette v√¨ ch·ªâ c√≥ m·ªôt c·ª•m.")

def reportOutliers(df, dbscan_labels):
    # T·∫°o DataFrame ch·ª©a c√°c ƒëi·ªÉm ngo·∫°i lai
    outliers = df[dbscan_labels == -1]
    st.write(f"S·ªë l∆∞·ª£ng ƒëi·ªÉm ngo·∫°i lai: {len(outliers)}")
    st.write("C√°c ƒëi·ªÉm ngo·∫°i lai:")
    st.dataframe(outliers)
    
    # Th·ªëng k√™ c√°c ƒëi·ªÉm ƒë√°ng ng·ªù
    suspicious_groups = df[(dbscan_labels != -1) & (dbscan_labels != 0)]
    if len(suspicious_groups) > 0:
        st.write("C√°c nh√≥m ƒë√°ng ng·ªù:")
        st.write(f"S·ªë l∆∞·ª£ng nh√≥m ƒë√°ng ng·ªù: {len(suspicious_groups)}")
        st.dataframe(suspicious_groups)
    
    # Th·ªëng k√™ c√°c ƒëi·ªÉm b√¨nh th∆∞·ªùng
    normal_groups = df[dbscan_labels == 0]
    if len(normal_groups) > 0:
        st.write("C√°c nh√≥m b√¨nh th∆∞·ªùng:")
        st.write(f"S·ªë l∆∞·ª£ng nh√≥m b√¨nh th∆∞·ªùng: {len(normal_groups)}")
        st.dataframe(normal_groups)



st.set_page_config(page_title="Dataset Visualizer", layout="wide")

st.title("üìä Dataset Visualizer")

# Upload CSV
# uploaded_file = st.file_uploader("üìÅ T·∫£i l√™n file CSV", type=["csv"])
uploaded_file = "./bank_transactions_data_2.csv"

st.sidebar.title("DBSCAN Clustering")
menu = st.sidebar.radio("Ch·ªçn trang", ["Explored Data Analysis", "DBSCAN Visualize"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    
    if menu == "Explored Data Analysis":

        # T·∫°o Tabs
        tab1, tab2, tab3, tab4 = st.tabs(["üîç Xem d·ªØ li·ªáu", "üìà Th·ªëng k√™ m√¥ t·∫£", "üìä Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi", "üî• Heatmap t∆∞∆°ng quan"])

        with tab1:
            overview(df)

        with tab2:
            nullData(df)
            duplicatedData(df)
            uniqueData(df)

        with tab3:
            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán gi√° tr·ªã c·ªßa TransactionAmount")
            plotTransactionAmount(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·ªßa Transaction Type")
            plotTransactionType(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ph√¢n b·ªë s·ªë l∆∞·ª£ng giao d·ªãch ·ªü c√°c ƒë·ªãa ƒëi·ªÉm")
            plotLocationByTransactionVolume(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·ªßa Channel")
            plotChannel(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa Customer Age")
            plotCustomerAge(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·ªßa Customer Occupation")
            plotCustomerOccupation(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa Account Balance")
            plotBalance(df)

            st.subheader("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa Transaction Amount v√† Account Balance")
            plotAmountBalance(df)

        with tab4:
            st.subheader("üî• Bi·ªÉu ƒë·ªì t∆∞∆°ng quan (heatmap)")
            plotCorrelation(df)

    if menu == "DBSCAN Visualize":

        df, scaled_data = preprocessData(df)
        
        min_samples = int(st.text_input("Nh·∫≠p min_samples", value=6, key="min_samples"))
        # T√≠nh to√°n K-distance
        st.subheader("üîç T√≠nh to√°n K-distance ƒë·ªÉ ch·ªçn eps")
        plotKDistance(df, scaled_data, k=min_samples)

        # T√≠nh to√°n DBSCAN
        eps = float(st.text_input("Nh·∫≠p eps", value=0.54, key="eps"))
        
        if eps != 0.0:
            st.subheader("üîç T√≠nh to√°n DBSCAN")
            dbscan_labels = computeDBSCAN(df, scaled_data, eps, min_samples)
            df = mapDBSCANLabels(df, dbscan_labels)

            st.subheader("üîç Bi·ªÉu ƒë·ªì ph√¢n t√°n DBSCAN 2D")
            visualizeDBSCAN2D(df, scaled_data)

            st.subheader("üîç Bi·ªÉu ƒë·ªì ph√¢n t√°n DBSCAN 3D")
            visualizeDBSCAN3D(df, scaled_data)

            st.subheader("üîç T√≠nh to√°n ch·ªâ s·ªë Silhouette")
            computeSilhouette(df, scaled_data, dbscan_labels)

            st.subheader("üîç B√°o c√°o c√°c ƒëi·ªÉm ngo·∫°i lai")
            reportOutliers(df, dbscan_labels)


        
else:
    st.info("Vui l√≤ng t·∫£i l√™n m·ªôt file CSV.")

